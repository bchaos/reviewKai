// Generated by CoffeeScript 1.6.3
(function() {
  var addGameScore, app, bcrypt, calculateAllReviewForGame, calculateNewPeers, calculateNewPros, calculateProReviewForGame, caluclatePeerReviewsForGame, connect, connection, crypto, fs, getGamesForUser, getGurusGameForUser, getOrCreateGame, getOrCreateProReviewer, getPeersGameForUser, getRecentReleases, getReviewLinksForProReviewers, handler, io, mysql, salt, server, updateGameList, validateEmail, validator, __dirname;

  connect = require('connect');

  app = require('express')();

  server = require('http').Server(app);

  io = require('socket.io')(server);

  crypto = require('crypto');

  bcrypt = require('bcrypt');

  salt = bcrypt.genSaltSync(10);

  fs = require('fs');

  mysql = require('mysql');

  validator = require('validator');

  __dirname = '';

  connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'propeller1',
    database: 'zf2reviewer'
  });

  server.listen(8080, function() {
    return console.log('server activated');
  });

  app.get('/', function(req, res) {
    return res.send('<h1>Hello world</h1>');
  });

  handler = function(req, res) {
    return fs.readFile(__dirname + '/index.html', function(err, data) {
      if (err) {
        res.writeHead(500);
        return res.end('error loading index.html');
      } else {
        res.writeHead(200);
        return res.end(data);
      }
    });
  };

  app.directive('card-flipable', function() {
    return {
      restrict: 'E',
      templateUrl: 'card.html'
    };
  });

  calculateNewPros = function(userId) {
    var sql;
    sql = 'call calculateNewPros(' + userId + ')';
    return connection.query(sql, userId, function(err, results) {});
  };

  calculateNewPeers = function(userId) {
    var sql;
    sql = 'call calculateNewPeers(' + userId + ')';
    return connection.query(sql, function(err, results) {
      console.log(err);
      return console.log(results);
    });
  };

  calculateProReviewForGame = function(gameid, userid, callback) {
    var sql;
    sql = 'Select avg(rating) as rating , avg(enjoyment) as enjoyment ,  avg(unenjoyment) as unenjoyment , avg(difficulty) as difficulty ,  avg(length) as length  from ProReviewerLibrary prl ,userToProreviewer utp  where prl.id = utp.reviewer_id and utp.user_id=' + userid + ' and prl.game_id = ' + gameid;
    return connection.query(sql, [data.id], function(err, result) {
      return callback(result[0]);
    });
  };

  caluclatePeerReviewsForGame = function(gameid, userid, callback) {
    var sql;
    sql = 'Select avg(rating) as rating , avg(enjoyment) as enjoyment ,  avg(unenjoyment) as unenjoyment , avg(difficulty) as difficulty ,  avg(length) as length  from library prl , userToReviewers utp  where prl.id = utp.reviewer_id and utp.user_id=' + userid + ' and prl.game_id = ' + gameid;
    return connection.query(sql, [data.id], function(err, result) {
      return callback(result[0]);
    });
  };

  calculateAllReviewForGame = function(gameid, callback) {
    var sql;
    sql = 'Select avg(rating) as rating , avg(enjoyment) as enjoyment ,  avg(unenjoyment) as unenjoyment , avg(difficulty) as difficulty ,  avg(length) as length  from library l where l.game_id = ' + gameid;
    return connection.query(sql, [data.id], function(err, result) {
      return callback(result[0]);
    });
  };

  getReviewLinksForProReviewers = function(gameid, callback) {
    var sql;
    sql = 'Select review_link  from ProReviewerLibrary prl ,userToProreviewer utp  where prl.id = utp.reviewer_id and utp.user_id=' + userid + ' and prl.game_id = ' + gameid;
    return connection.query(sql, [data.id], function(err, result) {
      return callback(result);
    });
  };

  getOrCreateGame = function(data, callback) {
    var sql;
    sql = 'Select count(*) as gamecount, id from games where giantBomb_id = ?';
    return connection.query(sql, [data.giantBomb_id], function(err, result) {
      var firstresult;
      firstresult = result[0];
      console.log(data);
      console.log(firstresult);
      if (firstresult.gamecount > 0) {
        return callback(firstresult.id);
      } else {
        sql = 'Insert into games Set ?';
        return connection.query(sql, data, function(err, result) {
          var gameid;
          gameid = result.insertId;
          return callback(gameid);
        });
      }
    });
  };

  getOrCreateProReviewer = function(data, callback) {
    var sql;
    sql = 'Select count(*) as reviewerCount ,id from ProReviewers where name = "' + data.name + '"';
    console.log(data);
    return connection.query(sql, function(err, result) {
      var firstresult;
      firstresult = result[0];
      if (firstresult.reviewerCount > 0) {
        return callback(firstresult.id);
      } else {
        sql = 'Insert into ProReviewers Set ?';
        return connection.query(sql, data, function(err, result) {
          var gameid;
          gameid = result.insertId;
          return callback(gameid);
        });
      }
    });
  };

  validateEmail = function(email) {
    var re;
    re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
  };

  getRecentReleases = function(userid, client) {
    var sql;
    sql = 'Select * from ';
    sql += '(select  g.game_name , g.game_picture, g.id from  games g order by releasedate desc) t1  ';
    sql += ' join (Select avg (peer.rating) as peerscore, peer.game_id from library peer, userToReviewers utr where  utr.reviewer_id = peer.user_id and utr.user_id = ' + userid + ' group by peer.game_id ) t2 ';
    sql += 'on t1.id = t2.game_id left  join (Select avg (pro.rating) as guruscore, pro.game_id from ProReviewerLibrary pro, userToProreviewer utr where  utr.reviewer_id = pro.user_id and utr.user_id = ' + userid + ' group by pro.game_id ) t3 ';
    sql += 'on t3.game_id = t1.id left join (Select ((avg(pro.rating)*1.275 + avg(world.rating)*.725)/2)  as worldscore, world.game_id from library world, ProReviewerLibrary pro  where world.game_id = pro.game_id group by world.game_id ) t4 ';
    sql += 'on t4.game_id = t1.id';
    return connection.query(sql, function(err, result) {
      return client.emit('recentReleases', result);
    });
  };

  getGurusGameForUser = function(userid, client) {
    var sql;
    sql = 'Select * from ';
    sql += '(select  g.game_name , g.game_picture, g.id from  games g order by releasedate desc) t1 ';
    sql += ' join (Select avg (peer.rating) as peerscore, peer.game_id from library peer, userToReviewers utr where  utr.reviewer_id = peer.user_id and utr.user_id = ' + userid + ' group by peer.game_id ) t2 ';
    sql += 'on t1.id = t2.game_id  left join (Select avg (pro.rating) as guruscore, pro.game_id from ProReviewerLibrary pro, userToProreviewer utr where  utr.reviewer_id = pro.user_id and utr.user_id = ' + userid + ' group by pro.game_id ) t3 ';
    sql += 'on t3.game_id = t1.id left join (Select ((avg(pro.rating)*1.275 + avg(world.rating)*.725)/2)  as worldscore, world.game_id from library world, ProReviewerLibrary pro  where world.game_id = pro.game_id group by world.game_id ) t4 ';
    sql += 'on t4.game_id = t1.id';
    return connection.query(sql, function(err, result) {
      return client.emit('guruLibraryFound', result);
    });
  };

  getPeersGameForUser = function(userid, client) {
    var sql;
    sql = 'Select * from ';
    sql += '(select  g.game_name , g.game_picture, g.id from  games g) t1 ';
    sql += 'join (Select avg (peer.rating) as peerscore, peer.game_id from library peer, userToReviewers utr where  utr.reviewer_id = peer.user_id and utr.user_id = ' + userid + ' group by peer.game_id ) t2 ';
    sql += 'on t1.id = t2.game_id left join (Select avg (pro.rating) as guruscore, pro.game_id from ProReviewerLibrary pro, userToProreviewer utr where  utr.reviewer_id = pro.user_id and utr.user_id = ' + userid + ' group by pro.game_id ) t3 ';
    sql += 'on t3.game_id = t1.id left join (Select ((avg(pro.rating)*1.275 +  avg(world.rating)*.725)/2)  as worldscore, world.game_id from library world, ProReviewerLibrary pro  where world.game_id = pro.game_id group by world.game_id ) t4 ';
    sql += 'on t4.game_id = t1.id';
    return connection.query(sql, function(err, result) {
      return client.emit('peerLibraryFound', result);
    });
  };

  getGamesForUser = function(userid, client) {
    var sql;
    console.log(userid);
    sql = 'Select * from ';
    sql += '(select l.rating,l.added, g.id, l.description , g.game_name , g.game_picture from library l, games g where l.game_id = g.id and l.user_id =' + userid + ' ) t1 ';
    sql += 'left join (Select avg (peer.rating) as peerscore, peer.game_id from library peer, userToReviewers utr where  utr.reviewer_id = peer.user_id and utr.user_id = ' + userid + ' group by peer.game_id ) t2 ';
    sql += 'on t1.id = t2.game_id left join (Select avg (pro.rating) as guruscore, pro.game_id from ProReviewerLibrary pro, userToProreviewer utr where  utr.reviewer_id = pro.user_id and utr.user_id = ' + userid + ' group by pro.game_id ) t3 ';
    sql += 'on t3.game_id = t1.id left join (Select ((avg(pro.rating)*1.275 +  avg(world.rating)*.725)/2)  as worldscore, world.game_id from library world, ProReviewerLibrary pro  where world.game_id = pro.game_id group by world.game_id ) t4 ';
    sql += 'on t4.game_id = t1.id';
    return connection.query(sql, function(err, result) {
      return client.emit('gameLibraryFound', result);
    });
  };

  addGameScore = function(userid, gameid, callback) {
    var sql;
    sql = 'Select * from ';
    sql += '(select g.id from  games g where g.giantBomb_id  = ' + gameid + ') t1 ';
    sql += 'left join (Select avg (peer.rating) as peerscore, peer.game_id from library peer, userToReviewers utr where  utr.reviewer_id = peer.user_id and utr.user_id = ' + userid + ' group by peer.game_id ) t2 ';
    sql += 'on t1.id = t2.game_id left join (Select avg (pro.rating) as guruscore, pro.game_id from ProReviewerLibrary pro, userToProreviewer utr where  utr.reviewer_id = pro.user_id and utr.user_id = ' + userid + ' group by pro.game_id ) t3 ';
    sql += 'on t3.game_id = t1.id left join (Select ((avg(pro.rating)*1.275 +  avg(world.rating)*.725)/2)  as worldscore, world.game_id from library world, ProReviewerLibrary pro  where world.game_id = pro.game_id group by world.game_id ) t4 ';
    sql += 'on t4.game_id = t1.id';
    return connection.query(sql, gameid, function(err, result) {
      console.log(result);
      return callback(result);
    });
  };

  updateGameList = function(userid, gamelist, index, callback) {
    var game, length;
    length = gamelist.length;
    if (index + 1 < length) {
      game = gamelist[index];
      return addGameScore(userid, game.id, function(results) {
        if (results) {
          game.details = results[0];
          gamelist[index] = game;
        }
        return updateGameList(userid, gamelist, index + 1, callback);
      });
    } else {
      return callback(gamelist);
    }
  };

  io.on('connection', function(client) {
    var getAccessList, getProLibrary, getPros, updateExpirationDate, userid;
    userid = 0;
    console.log('userConnected');
    client.on('SignUpUser', function(data) {
      var sql;
      if (!validator.isEmail(data.username)) {
        client.emit('failureMessage', 'Not a valid email address');
      }
      sql = 'Select Count(*) as userCount from user where username = ?';
      return connection.query(sql, [data.username], function(err, result) {
        var currentTime, d, newExpiration, sessionKey;
        if (result[0].userCount > 0) {
          client.emit('UserEmailAlreadyExists');
          return console.log('user exists ');
        } else {
          sql = 'Insert into user Set ?';
          d = new Date();
          currentTime = d.getMilliseconds();
          newExpiration = currentTime + 7 * 86400000;
          sessionKey = crypto.createHash('md5').update(currentTime + 'salt').digest('hex');
          data.sessionKey = sessionKey;
          data.expires = newExpiration;
          data.password = bcrypt.hashSync(data.password, salt);
          return connection.query(sql, data, function(err, result) {
            var accessList;
            userid = result.insertId;
            accessList = getAccessList(false);
            return client.emit('userLoggedin', {
              sessionKey: sessionKey,
              location: '/home',
              accessList: accessList
            });
          });
        }
      });
    });
    client.on('SignUpUserViaFacebook', function(data) {});
    updateExpirationDate = function(newExperationDate) {
      var sql;
      sql = 'Update  user set expires =' + newExperationDate + ' where  id =' + userid;
      return connection.query(sql, function(err, results) {});
    };
    client.on('logout', function(data) {
      return updateExpirationDate(0);
    });
    getAccessList = function(isadmin) {
      var accessList;
      accessList = [
        {
          name: 'Dashboard',
          link: 'dash'
        }, {
          name: 'Library',
          link: 'library'
        }, {
          name: 'Recomendations',
          link: 'guru'
        }
      ];
      if (isadmin) {
        accessList.push({
          name: 'Pros',
          link: 'pros'
        });
      }
      return accessList;
    };
    client.on('isUserLoggedin', function(data) {
      var currentTime, d, sql;
      d = new Date();
      currentTime = d.getMilliseconds();
      sql = 'Select * from  user where sessionkey	 = ? and expires >' + currentTime;
      return connection.query(sql, [data.key], function(err, result) {
        var accessList, newExpiration;
        if (result[0]) {
          newExpiration = currentTime + 7 * 86400000;
          userid = result[0].id;
          accessList = getAccessList(result[0].isAdmin);
          client.emit('userLoggedin', {
            sessionKey: data.key,
            location: data.location,
            accessList: accessList
          });
          return updateExpirationDate(newExpiration);
        } else {
          return client.emit('failedToLogin', 0);
        }
      });
    });
    client.on('GetLibrary', function() {
      return getGamesForUser(userid, client);
    });
    client.on('updateGameInLibrary', function(data) {
      var sql;
      sql = ' Update library Set ? where id =' + data.id;
      return connection.query(sql, data, function(err, result) {
        console.log(' game updated');
        return getGamesForUser(userid, client);
      });
    });
    client.on('GetGuruLibrary', function() {
      return getGurusGameForUser(userid, client);
    });
    client.on('GetPeerLibrary', function() {
      return getPeersGameForUser(userid, client);
    });
    client.on('AddNewGameToLibrary', function(data) {
      return getOrCreateGame(data.giantBombinfo, function(gameid) {
        var sql;
        data.userInfo.game_id = gameid;
        data.userInfo.user_id = userid;
        sql = ' Insert into library Set ?';
        console.log(data.userInfo);
        return connection.query(sql, data.userInfo, function(err, results) {
          console.log(err);
          calculateNewPeers(data.userInfo.user_id);
          calculateNewPros(data.userInfo.user_id);
          return getGamesForUser(userid, client);
        });
      });
    });
    client.on('Login', function(data) {
      var sql;
      sql = 'Select password, isAdmin,id from user where username ="' + data.username + '"';
      return connection.query(sql, function(err, result) {
        if (result.length > 0) {
          return bcrypt.compare(data.password, result[0].password, function(err, res) {
            var accessList, currentTime, d, newExpiration, sessionKey;
            if (res) {
              userid = result[0].id;
              d = new Date();
              currentTime = d.getMilliseconds();
              newExpiration = currentTime + 7 * 86400000;
              sessionKey = crypto.createHash('md5').update(currentTime + 'salt').digest('hex');
              sql = 'Update user set sessionkey ="' + sessionKey + '", expires = ' + newExpiration + ' where  id =' + userid;
              accessList = getAccessList(result[0].isAdmin);
              client.emit('userLoggedin', {
                sessionKey: sessionKey,
                location: '/home',
                accessList: accessList
              });
              return connection.query(sql, data.userInfo, function(err, results) {});
            } else {
              return client.emit('failureMessage', 'Username or Password incorrect');
            }
          });
        } else {
          return client.emit('failureMessage', 'User not found');
        }
      });
    });
    client.on('GetNewGameReviews', function() {
      var sql;
      sql = 'Select * from games where 1 sort by added Desc limit 10';
      return connection.query(sql, function(err, result) {
        var gameid, games, res, _i, _len;
        games = [];
        for (_i = 0, _len = result.length; _i < _len; _i++) {
          res = result[_i];
          gameid = res['id'];
          res['peerReview'] = caluclatePeerReviewsForGame(gameid);
          res['proReview'] = calculateProReviewForGame(gameid);
          games.push(res);
        }
        return client.emit('recentGames', games);
      });
    });
    client.on('GetReviewForGame', function(gameid) {
      var sql;
      sql = 'Select * from games where id = ? ';
      return connection.query(sql, [gameid], function(err, result) {
        result['peerReview'] = caluclatePeerReviewsForGame(gameid);
        result['proReview'] = calculateProReviewForGame(gameid);
        return client.emit('gameReview', result);
      });
    });
    client.on('updateGame', function(game) {
      var sql;
      sql = 'Update library set rating =' + game.rating + ', description = "' + game.description + '" where id =' + game.game_id;
      console.log(sql);
      return connection.query(sql, [gameid], function(err, result) {
        return getGamesForUser(userid, client);
      });
    });
    client.on('searchForGames', function(games) {
      return updateGameList(userid, games.list, 0, function(newlist) {
        return client.emit('searchfinished', newlist);
      });
    });
    client.on('getGuruDetails', function(gameid) {
      var sql;
      sql = 'Select g.game_name as name, pr.name as reviewerName, prl.true_score as score, prl.true_score_max as scoremax, prl.review_link as reviewlink from userToProreviewer utp, ProReviewerLibrary prl ,games g , ProReviewers pr where utp.user_id =' + userid + ' and utp.reviewer_id = pr.id and g.id =' + gameid.gameid + ' and prl.user_id = utp.reviewer_id and g.id = prl.game_id';
      return connection.query(sql, function(err, result) {
        return client.emit('guruDetailsFound', result);
      });
    });
    client.on('getPeerDetails', function(gameid) {
      var sql;
      sql = 'Select g.game_name as name, pr.name as reviewerName, prl.rating as score, prl.description as details from userToReviewers utp, library prl, games g , user pr where utp.user_id =' + userid + ' and utp.reviewer_id = pr.id and g.id =' + gameid.gameid + ' and prl.user_id = utp.reviewer_id and g.id = prl.game_id';
      return connection.query(sql, function(err, result) {
        console.log(result);
        return client.emit('peerDetailsFound', result);
      });
    });
    getPros = function() {
      var sql;
      sql = 'Select * from ProReviewers  where active = 1';
      return connection.query(sql, function(err, result) {
        console.log(result);
        return client.emit('ProreviewersFound', result);
      });
    };
    client.on('GetRecentGames', function() {
      return getRecentReleases(userid, client);
    });
    client.on('GetProreviewers', function(data) {
      return getPros();
    });
    client.on('addPro', function(data) {
      var sql;
      sql = 'Insert into ProReviewers Set ?';
      return connection.query(sql, data, function(err, result) {
        return getPros();
      });
    });
    client.on('ProReviewers', function(data) {
      var sql;
      sql = 'Update library set site_address =' + data.site_address + ', name = "' + data.name + '" where id =' + data.id;
      return connection.query(sql, [gameid], function(err, result) {
        return getPros();
      });
    });
    getProLibrary = function(id) {
      var sql;
      sql = 'Select * from  ProReviewerLibrary pr, games g where g.id=pr.game_id and pr.user_id =' + id;
      console.log(sql);
      return connection.query(sql, function(err, result) {
        return client.emit('ProLibrarysFound', result);
      });
    };
    client.on('GetProreviewerLibrary', function(data) {
      return getProLibrary(data.id);
    });
    client.on('AddNewProGameToLibrary', function(data) {
      return getOrCreateGame(data.giantBombinfo, function(gameid) {
        var sql;
        data.userInfo.game_id = gameid;
        sql = 'Insert into ProReviewerLibrary  Set ?';
        return connection.query(sql, data.userInfo, function(err, results) {
          return getProLibrary(data.userInfo.user_id);
        });
      });
    });
    return client.on('AddGameandReviewerToLibrary', function(data) {
      return getOrCreateGame(data.giantBombinfo, function(gameid) {
        return getOrCreateProReviewer(data.pro, function(newuserid) {
          var sql;
          data.userInfo.game_id = gameid;
          data.userInfo.user_id = newuserid;
          sql = 'Select count(*) as gamecount from ProReviewerLibrary where game_id = ' + gameid + ' and user_id=' + newuserid;
          return connection.query(sql, [data.giantBomb_id], function(err, result) {
            var firstresult;
            firstresult = result[0];
            if (firstresult.gamecount === 0) {
              sql = 'Insert into ProReviewerLibrary  Set ?';
              return connection.query(sql, data.userInfo, function(err, results) {});
            }
          });
        });
      });
    });
  });

}).call(this);
