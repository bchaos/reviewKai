
DELIMITER $$

CREATE PROCEDURE  `calculateNewPros` ( IN  NewUserID INT ) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER BEGIN

DECLARE userCount INT DEFAULT 0;
DECLARE userIndex INT DEFAULT 0;
DECLARE userToAdd INT DEFAULT 0;
Delete from  userToProreviewer where user_id=NewUserID;
DROP TEMPORARY TABLE IF EXISTS ub_rank;
create temporary table ub_rank as 
select similar.user_id,count(*) rank
FROM library target
JOIN ProReviewerLibrary similar ON target.game_id = similar.game_id
AND target.user_id != similar.user_id
AND target.rating
BETWEEN similar.rating -1
AND similar.rating +1
WHERE target.user_id = NewUserID
GROUP BY similar.user_id;

Select Count(*) into userCount from ub_rank;
if userCount > 10 then
	set userCount= 10;
end if;
set userIndex = 0; 
PREPARE stmt1 FROM 'select user_id into @userToAdd 
					from ub_rank order by rank desc
					limit ?, 1';
while userIndex < userCount Do

set @userIndex = userIndex;
EXECUTE stmt1 USING @userIndex;

Insert into userToProreviewer  (user_id, reviewer_id) values ( NewUserID,@userToAdd );
set userIndex=userIndex+1;

end while;
DEALLOCATE PREPARE stmt1;
END $$



DELIMITER $$

CREATE PROCEDURE  `calculateNewPeers` ( IN  NewUserID INT) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER BEGIN

DECLARE userCount INT DEFAULT 0;
DECLARE userIndex INT DEFAULT 0;
DECLARE userToAdd INT DEFAULT 0;
Delete from userToReviewers where user_id=NewUserID;
DROP TEMPORARY TABLE IF EXISTS ub_rank;
create temporary table ub_rank as 
select similar.user_id,count(*) rank
from library target  join library similar 
on target.game_id= similar.game_id 
and target.user_id != similar.user_id  
and target.rating between similar.rating-1 
and similar.rating+1 where target.user_id =NewUserID group by similar.user_id; 

Select Count(*) into userCount from ub_rank;
set userIndex = 0; 
if userCount > 20 then
	set userCount= 20;
end if;
PREPARE stmt1 FROM 'select user_id into @userToAdd 
					from ub_rank order by rank desc
					limit ?, 1';
while userIndex < userCount Do
set @userIndex = userIndex;
EXECUTE stmt1 USING @userIndex;

Insert into userToReviewers  (user_id, reviewer_id) values ( NewUserID,@userToAdd );
set userIndex=userIndex+1;

end while;
DEALLOCATE PREPARE stmt1;
END $$




DELIMITER $$

CREATE PROCEDURE  `fixextraGames` ( IN  startingpoint INT, IN  endingpoint INT   ) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER BEGIN
DECLARE gamestart INT DEFAULT 0;
set gamestart  = startingpoint+1;
update `ProReviewerLibrary` set game_id = startingpoint where game_id  between gamestart and endingpoint;

delete from  games where id  between gamestart and endingpoint;

END $$


DELIMITER $$
CREATE PROCEDURE  `updateFakeUsers` (  IN  startingpoint INT, IN  endingpoint INT  ) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER BEGIN

DECLARE currentGame INT DEFAULT 0;
DECLARE gameID INT DEFAULT 0;
DECLARE gameRating INT DEFAULT 0;
DECLARE newUserIndex INT DEFAULT 0;
set currentGame = startingpoint;

while currentGame < endingpoint+1 Do
set @currentGame= currentGame;

select u.fakeuserid, r.rating, r.game_id into @newUserIndex, @gameRating,@gameID  from ProReviewers u , ProReviewerLibrary r where r.user_id = u.id and r.id  = @currentGame; 

Insert into library  (user_id, game_id,rating) values ( @newUserIndex,@gameID ,@gameRating );
set currentGame = currentGame+1;
end while;



END $$

DELIMITER $$

CREATE PROCEDURE  `convertProLibraryToFakeUser` ( IN  userID INT , IN name nvarchar(256) ) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER BEGIN

DECLARE LibraryCount INT DEFAULT 0;
DECLARE gameIndex INT DEFAULT 0;
DECLARE newUser INT DEFAULT 0;
DECLARE gameID INT DEFAULT 0;
DECLARE gameRating INT DEFAULT 0;
DECLARE newUserIndex INT DEFAULT 0;
Insert into user (username, password, name) values ( name , 'd1um2m2my2pa2s2s2ord', name);
set newUserIndex = LAST_INSERT_ID();
Select count(*) into LibraryCount from ProReviewerLibrary where user_id = userID;

PREPARE stmt1 FROM 'select game_id, rating into @gameID, @gameRating
					from ProReviewerLibrary where user_id = ? 
					limit ?, 1';

while gameIndex < LibraryCount Do
set @gameIndex = gameIndex;
set @userid = userID;
set @newUserIndex = newUserIndex;
EXECUTE stmt1 USING @userid, @gameIndex;
Update ProReviewers set fakeuserid = @newUserIndex where id =  @userid;
Insert into library  (user_id, game_id,rating) values ( @newUserIndex,@gameID ,@gameRating );
set gameIndex=gameIndex+1;

end while;
DEALLOCATE PREPARE stmt1;
END $$


DELIMITER $$

CREATE PROCEDURE  `getGamesForUserOnplatform` ( IN  userid INT, IN name nvarchar(256) ) NOT DETERMINISTIC CONTAINS SQL SQL SECURITY DEFINER BEGIN

DROP TEMPORARY TABLE IF EXISTS gamesOwnedByUser ;
create temporary table gamesOwnedByUser as 
 Select library.game_id from library where library.user_id = userid;
 
DROP TEMPORARY TABLE IF EXISTS gamesInPlatform ;
create temporary table gamesInPlatform as 
Select g.id from  games g, gameOnplatform gop,   platforms p  where  gop.game_id= g.id and gop.platform_id = p.id and p.display_name = name and g.id not in ( select * from gamesOwnedByUser where 1);

set @Results = ( select 
group_concat(id) from gamesInPlatform );

DROP TEMPORARY TABLE IF EXISTS t1 ;
create temporary table t1 as 
select  g.game_name , g.game_picture, g.id, g.giantBomb_id,g.releasedate   from  games g where Find_In_Set (g.id, @Results)>0 ;
    
DROP TEMPORARY TABLE IF EXISTS t2 ;
create temporary table t2 as 
Select avg (peer.rating) as peerscore, peer.game_id from library peer, userToReviewers utr  where   utr.reviewer_id = peer.user_id and utr.user_id = userid and Find_In_Set (peer.game_id, @Results) >0 group by peer.game_id ;

DROP TEMPORARY TABLE IF EXISTS t3 ;
create temporary table t3 as 
Select avg (pro.rating) as guruscore, pro.game_id from ProReviewerLibrary pro, userToProreviewer utr where  utr.reviewer_id = pro.user_id and utr.user_id = userid  and Find_In_Set (pro.game_id, @Results) >0 group by pro.game_id;


Select * from 
t1 join t2 on t1.id = t2.game_id left join t3 on t3.game_id = t1.id;
END $$
