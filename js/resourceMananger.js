// Generated by CoffeeScript 1.6.3
(function() {
  var commonDB;

  commonDB = require('./commonDatabaseFiles');

  module.exports = function(client, connection) {
    var addResourceToClientLibrary, doesResourceExist, getResource;
    doesResourceExist = function(resource, callback) {
      var sql;
      sql = 'Select count(*), id from where link ="' + resource.link + '" and game_id = ' + resource.gameid;
      return connection.query(sql, function(err, results) {
        if (results[0].count === 0) {
          return callback(false);
        } else {
          return callback(results[0].id);
        }
      });
    };
    addResourceToClientLibrary = function(resourceid) {
      var data, sql;
      data = {
        user_id: client.userid,
        resource_id: resourceid
      };
      sql = 'insert into userToResource SET ?';
      return connection.query(sql, data.userInfo, function(err, results) {
        return client.emit('ResourceAdded');
      });
    };
    client.on('addResource', function(resourceInfo) {
      return doesResourceExist(resourceInfo, function(exists) {
        var sql;
        if (exists) {
          return addResourceToClientLibrary(exists);
        } else {
          sql = 'insert into resources SET ?';
          return connection.query(sql, data.userInfo, function(err, results) {
            var resourceid;
            resourceid = result.insertId;
            return addResourceToClientLibrary(resourceid);
          });
        }
      });
    });
    getResource = function(game, user, callback) {
      var sql;
      sql = 'Select * from userToResource utr, resources r where utr.user_id = ' + user + ' and utr.resource_id= r.id and r.game_id=' + game;
      return connection.query(sql, function(err, results) {
        return callback(results);
      });
    };
    client.on('getMyResources', function(game) {
      return getResource(game.id, client.userid, function(results) {
        return client.emit('yourResourcesForThisGame', results);
      });
    });
    client.on('getResourceFromUserToGame', function(game) {
      return getResource(game.id, game.userid, function(results) {
        return client.emit('thisUserResources', results);
      });
    });
    client.on('getRecommendedResources', function(game) {
      var sql;
      sql = 'Select r.link, r.name, r.description, u.username from resources r , user u, userToResources utr, userToReviewers utp where utp.user_id  =' + client.userid + ' and utp.reviewer_id = utr.user_id and u.id = utp.reviewer_id and r.id = utr.resource_id';
      return connection.query(sql, function(err, results) {
        return client.emit('recommendedReources', results);
      });
    });
    return client.on('removeResource', function(resourceInfo) {
      var sql;
      sql = 'delete from rescourcesr where r.resource_id =' + resouceInfo.id + ' and user_id =' + client.user_id;
      return connection.query(sql, function(err, results) {
        return getResource(resouceInfo.gameid, client.userid, function(results) {
          return client.emit('yourResourcesForThisGame', results);
        });
      });
    });
  };

}).call(this);
